% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/recode.R
\name{overwrite}
\alias{overwrite}
\title{Overwrite values}
\usage{
overwrite(x, to, .na = NA)
}
\arguments{
\item{x}{An atomic vector.}

\item{.na}{New value for missing values in \code{x}. Defaults to \code{NA}.}
}
\value{
A vector of the same length of \code{x} with new values matching those
in \code{to}.
}
\description{
\code{\link[=overwrite]{overwrite()}} recodes values in \code{x} to a new set of values provided in \code{to};
the values in \code{to} are recycled to match the length of \code{x}. By default,
missing values remain \code{NA}.
}
\examples{
x <- c(letters[1:4], NA, NA)
# Recode all values to `"x"` but keep `NA`.
sdtm.oak:::overwrite(x, to = "x")

# Recode all values to `"x"` but recode `NA` to a new value.
sdtm.oak:::overwrite(x, to = "x", .na = "x")
sdtm.oak:::overwrite(x, to = "x", .na = "Absent")

# If `to` is not a scalar, it is recycled and matched by position for
# replacement.
sdtm.oak:::overwrite(x, to = c("x", "y"))

# `x` can be of other types besides `character`, e.g. replace integers to a
# hard-coded new integer value.
sdtm.oak:::overwrite(x = 1:5, to = 0)

# Example involving `logical` vectors
sdtm.oak:::overwrite(x = c(TRUE, FALSE), to = FALSE)

# Returned type will be a type compatible with both the types of `to` and
# `.na`.
sdtm.oak:::overwrite(x = c("sdtm", "adam"), to = 0)
sdtm.oak:::overwrite(
  x = c("sdtm", "adam"),
  to = 0,
  .na = NA_character_
)
sdtm.oak:::overwrite(
  x = c("sdtm", "adam"),
  to = TRUE,
  .na = NA_real_
)

}
\keyword{internal}
