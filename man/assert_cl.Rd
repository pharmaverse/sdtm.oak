% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ct.R
\name{assert_cl}
\alias{assert_cl}
\title{Assert a code-list code}
\usage{
assert_cl(ct, cl, optional = FALSE)
}
\arguments{
\item{ct}{Either a data frame encoding a controlled terminology data set, or
\code{NULL}.}

\item{cl}{A string with a to-be asserted code-list code, or \code{NULL}.}

\item{optional}{A scalar logical, indicating whether \code{cl} can be \code{NULL} or
not.}
}
\value{
The function throws an error if \code{cl} is not a valid code-list code
given the controlled terminology data set; otherwise, \code{cl} is returned
invisibly.
}
\description{
\code{\link[=assert_cl]{assert_cl()}} asserts the validity of a code-list code in the context of
a controlled terminology specification.
}
\examples{
# Load a controlled terminology example.
(ct <- read_ct_example("ct-01-cm"))

# Should work fine.
sdtm.oak:::assert_cl(ct = ct, cl = "C71113")

# In certain cases, you might allow `cl` to be `NULL` as to indicate absence,
# in that case, set `optional` to `TRUE` to make `assert_cl()` more
# forgiving.
sdtm.oak:::assert_cl(ct = ct, cl = NULL, optional = TRUE)

# Otherwise it would err.
try(sdtm.oak:::assert_cl(ct = ct, cl = NULL, optional = FALSE))

}
\keyword{internal}
