% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ct.R
\name{assert_ct_spec}
\alias{assert_ct_spec}
\title{Assert a controlled terminology specification}
\usage{
assert_ct_spec(ct_spec, optional = FALSE)
}
\arguments{
\item{ct_spec}{A data frame to be asserted as a valid controlled terminology data
set.}
}
\value{
The function throws an error if \code{ct_spec} is not a valid controlled
terminology data set; otherwise, \code{ct_spec} is returned invisibly.
}
\description{
\code{\link[=assert_ct_spec]{assert_ct_spec()}} will check whether \code{ct_spec} is a data frame and if it contains the
variables: codelist_code, collected_value, term_synonyms, and term_value.

In addition, it will also check if the data frame is not empty (no rows), and
whether the columns \code{codelist_code} and \code{term_value} do
not contain any \code{NA} values.
}
\examples{
# If `ct_spec` is a valid controlled terminology then it is returned invisibly.
ct_spec_01 <- read_ct_spec_example("ct-01-cm")
all.equal(ct_spec_01, sdtm.oak:::assert_ct_spec(ct_spec_01))

# A minimal set of variables needs to be present in `ct_spec` for it to pass the
# assertion; `sdtm.oak:::ct_spec_vars()` defines their names.
(req_vars <- sdtm.oak:::ct_spec_vars())

# Other (facultative) variables also present in the controlled terminology
# example.
(opt_vars <- setdiff(colnames(ct_spec_01), req_vars))

# With only the mandatory variables, the assertion still passes.
sdtm.oak:::assert_ct_spec(ct_spec_01[req_vars])

# Not having the required variables results in an error.
try(sdtm.oak:::assert_ct_spec(ct_spec_01[opt_vars]))

}
\keyword{internal}
